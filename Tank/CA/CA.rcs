PROGR TankController{
TACT 50;


CONST T_H	0.1;
CONST X_MIN 0.1;
CONST X_MAX 0.5;
CONST H		0.6;
CONST U_MIN	0.0;	
CONST U_MAX	15.0;
CONST DELTA_U 3.0;
CONST K_P   31.2634; 
CONST K_I   0.4016;

ENUM 
{
	COM2CA_XD 
};
ENUM
{
		CA2GUI_X_LEVEL,
		CA2GUI_U_LEVEL
};
FUNCTION INT GetNextMsgGUI(VOID);
FUNCTION INT  GetMsgGUICode(VOID);	
FUNCTION FLOAT  GetFloatParamGUI(VOID);	
FUNCTION FLOAT  PortsToFloat(INT , INT , INT , INT );
FUNCTION INT GetBit(FLOAT, INT );
FUNCTION INT  SendMsgFloatParamGUI(INT, FLOAT);
FUNCTION INT SendMsgIntParamGUI(INT, INT);

INPUT X_BIT0_PORT  0 0 8;
INPUT X_BIT1_PORT  0 1 8;
INPUT X_BIT2_PORT  0 2 8;
INPUT X_BIT3_PORT  0 3 8;


OUTPUT U_BIT0_PORT  1 0 8;
OUTPUT U_BIT1_PORT  1 1 8;
OUTPUT U_BIT2_PORT  1 2 8;
OUTPUT U_BIT3_PORT  1 3 8;

PROC INIT 
{
	FLOAT U FOR ALL;
	FLOAT X FOR ALL;
	FLOAT XD FOR ALL;
	
	INT X_BIT0 = { X_BIT0_PORT [8]} FOR ALL; 
	INT X_BIT1 = { X_BIT1_PORT [8]} FOR ALL; 
	INT X_BIT2 = { X_BIT2_PORT [8]} FOR ALL; 
	INT X_BIT3 = { X_BIT3_PORT [8]} FOR ALL; 
	
	INT U_BIT0 = { U_BIT0_PORT [8]} FOR ALL; 
	INT U_BIT1 = { U_BIT1_PORT [8]} FOR ALL; 
	INT U_BIT2 = { U_BIT2_PORT [8]} FOR ALL; 
	INT U_BIT3 = { U_BIT3_PORT [8]} FOR ALL; 
	
	STATE InitialSetup
	{		
		START PROC READ_ADC;
		START PROC WRITE_DAC;
		START PROC CONTROLLER;
		START PROC Filter;
		START PROC ReadInputMsgs;
		START PROC Info;
		STOP;
	}
}

PROC ReadInputMsgs
{
	FROM PROC INIT XD;
	INT msg_code FOR ALL;
/* */
 STATE StartReading
 {
    /*  читаем код и параметр события из кольцевого буфера в структуру */
    IF (GetNextMsgGUI()) 
	{
		msg_code = GetMsgGUICode();
		IF (msg_code == COM2CA_XD)
		{
			XD = GetFloatParamGUI();
		}
	}
	LOOP;
}
}

PROC READ_ADC {
	FROM PROC INIT X, X_BIT0, X_BIT1, X_BIT2, X_BIT3;
	STATE READ {
		X = PortsToFloat(X_BIT0, X_BIT1, X_BIT2, X_BIT3);
	/*	SendMsgFloatParamGUI(CA2GUI_X_LEVEL, X); */
		LOOP;
	}
}	

/*Tank PI controller*/
/*X - water level */
/*XD - desired water level */
/*U - control signal */
/*U_MAX - maximum value of the control signal */
PROC CONTROLLER {
	FROM PROC INIT X, XD, U;
	FLOAT Sum LOCAL;
	FLOAT E LOCAL;

	STATE Init {
		Sum = 0.0;
		E = 0.0;
		SET NEXT;
	}
	
	STATE NormalPIControl {
		E = XD - X;
		Sum += E;
		/*control signal calculation*/
		/*numerical solution of a differential equation*/ 
		U = K_P * E + K_I * Sum * T_H;		
		
		IF (U > U_MAX)
		{ U = U_MAX; }
		IF( U < 0 ) U = 0.0;		
		IF (X >= X_MAX) { SET STATE Owerflow; }
		ELSE IF ( X < X_MIN) { SET STATE LowLevel;	}
	}
	STATE Owerflow
	{
		/* Emergency situation - water level is to hight. Pump stop */  
		U = 0;  
		IF (X < X_MAX) SET STATE Init;			
	}
	STATE LowLevel
	{
	/* Emergency situation - water level is to low. Maximum pump power */  
		U = U_MAX;
		IF (X > X_MIN) SET STATE Init;	
	}
}


PROC Filter
{
FROM PROC INIT U;
	FLOAT U_Prev LOCAL;
	STATE Init
	{
		U_Prev = U_MIN;
		SET NEXT;
	}
	STATE Filtering
	{
		IF ( U >= U_Prev) 
			IF ( U - U_Prev > DELTA_U )
			{
				U = U_Prev + DELTA_U;
			}
		ELSE 
			IF ( U_Prev - U > DELTA_U )
			{
				U = U_Prev - DELTA_U;
			}
		U_Prev = U;	
		LOOP;
	}
}



PROC WRITE_DAC {
	FROM PROC INIT U, U_BIT0, U_BIT1, U_BIT2, U_BIT3;
	STATE WRITE {

		U_BIT0 = GetBit(U, 0);
		U_BIT1 = GetBit(U, 1);
		U_BIT2 = GetBit(U, 2);
		U_BIT3 = GetBit(U, 3);
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT0);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT1);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT2);  */
	/*	SendMsgIntParamGUI(CA2GUI_U_LEVEL, U_BIT3);  */
		LOOP;                                        
	}                                                
}
 
    
    
    



PROC Info
{
	FROM PROC INIT X, U, U_BIT0, U_BIT1, U_BIT2, U_BIT3;
	STATE Idiling
	{
		TIMEOUT 50 
		{		
			/*SendMsgFloatParamGUI(CA2GUI_X_LEVEL, X); */
			SendMsgFloatParamGUI(CA2GUI_U_LEVEL, U); 
			SET STATE Idiling;
		}
	}
}

}